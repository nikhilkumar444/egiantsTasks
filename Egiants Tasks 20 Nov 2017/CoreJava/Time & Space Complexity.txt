Time complexity of hashmap is O(1) 


ime Complexity

Consider a dynamic array stack. In this model push() will double up the array size if there is no enough space. Since copying arrays cannot be performed in constant time, we say that push is also cannot be done in constant time. In this section, we will show that push() takes amortized constant time.

Let us count the number of copying operations needed to do a sequence of pushes.

 push() copy old array size new array size 
 1  	 0  	  1  	       -  
 2  	 1  	  1  	       2  
 3  	 2  	  2  	       4  
 4  	 0  	  4  	       -  
 5  	 4  	  4  	       8  
 6  	 0  	  8  	       -  
 7  	 0  	  8  	       -  
 8  	 0  	  8  	       -  
 9  	 8  	  8   	       16  
We see that 3 pushes requires 2 + 1 = 3 copies.

We see that 5 pushes requires 4 + 2 + 1 = 7 copies.

We see that 9 pushes requires 8 + 4 + 2 + 1 = 15 copies.

In general, 2n+1 pushes requires 2n + 2n-1+ ... + 2 + 1 = 2n+1 - 1 copies.
the number of copies is about the same as the number of pushes.

       2n+1 - 1
limit --------- = 2 = O(1)
 n?8   2n + 1

Hence it runs with constant time.



Space complexity of hashmap is o(n)

Space Complexity of hashmap in big-O notation is O(n) where n is the number of entries. So, big-O notation depicts the order of growth with the number of input, it doesn't reflect the exact numerical space an algorithm take. For hashmap, with the increase of the number of entries, the hashmap's space will increase linearly. So space complexity is O(n).
